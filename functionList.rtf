{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 PUBLIC\
\
blcest_function.R \
	blcest( cenData, df=0, thetaG = optimStartGuess(cenData), alpha =.05, maxit = 500 )\
\
censor_functions.R\
	censorData( uncenData, cenLevelVec )\
	censorDifferently( cenData, replacement =LOD/sqrt(2) )\
\
generate_functions.R\
	genData.T( n, locVec, scaleMat, df )\
	genData.N( n, xmu, ymu, xsd, ysd, r )\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 defaultGuess_function.R\
	defaultGuess( cenData )\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 PRIVATE\
\
likBivNorm_function.R\
	likBiv.N( thetaT, cenData )\
	bothUncen.N( thetaT, cenData )\
	bothCen.N( thetaT, cenData )\
	yOnlyCen.N( thetaT, cenData )\
	xOnlyCen.N( thetaT, cenData )\
\
likBivT_function.R\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 	likBiv.T( thetaT, cenData, df )\
	bothUncen.T( thetaT, cenData, df )\
	bothCen.T( thetaT, cenData, df )\
	yOnlyCen.T( thetaT, cenData, df )\
	xOnlyCen.T( thetaT, cenData, df )\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
pnorm2_function.R 		(no documentation)\
	pnorm2( x,m,s,r,log.p=TRUE )\
	pnorm2.std( h,k,rho,log.p=TRUE )\
	pnorm2.uv( x,m,s,r,log.p=TRUE )\
	f( r, h, k )\
	F( h, k, rho )\
\
rescaleVarCovMat_function.R\
	rescaleVarCovMat( varCovMat, transPar )\
\
transform_function.R\
	transformTheta( thetaI )\
	transformThetaInv( thetaT )\
\
trial				(no documentation) ( temp public )\
	bivariateSummary(x)\
	runTrial.N( nsim,n,theta=c(0,0,1,1,0), censorLevel=c(0,0),alpha=0.2 )\
	runTrial.T( nsim, n, theta=c(0,0,1,1,0), df=4, censorLevel=c(0,0),alpha=0.2 )\
	checkCICoverage( outputData, theta =c(0,0,1,1,0) )\
	checkBiasMse( outputData, theta =c(0,0,1,1,0) )\
\
scaleMat.T_functions.R	(no documentation)\
	buildScaleMat( sdx, sdy, r, df )\
	convertToScale( varCovPara, df )\
	convertFromScale( scalePara, df )\
	convertThetaToScale( oldTheta, df )\
	convertThetaFromScale( scaleTheta, df )\
}